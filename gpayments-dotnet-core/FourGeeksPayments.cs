using gpayments_core.Model;
using gpayments_core.Utils;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Net;

namespace gpayments_core
{
    public class FourGeeksPayments
    {
        public Token Token { get; }

        private static string BaseUrl = "https://api.payments.4geeks.io/";
        private static string AuthUrl = $"{BaseUrl}authentication/token/";
        private static string MeUrl = $"{BaseUrl}v1/accounts/me/";
        private static string CustomersUrl = $"{BaseUrl}v1/accounts/customers/";
        private static string CustomerUrl = $"{BaseUrl}v1/accounts/customer/";
        private static string ChargeUrl = $"{BaseUrl}v1/charges/create/";
        private static string SimpleChargeUrl = $"{BaseUrl}v1/charges/simple/create/";
        private static string LogsUrl = $"{BaseUrl}v1/charges/logs/";
        private static string PlanCreateUrl = $"{BaseUrl}v1/plans/create/";
        private static string PlansUrl = $"{BaseUrl}v1/plans/mine/";
        private static string SubscribeUrl = $"{BaseUrl}v1/plans/subscribe/";
        private static string SubscriptionsUrl = $"{BaseUrl}v1/plans/subscriptions/";
        private static string SubscriptionUrl = $"{BaseUrl}v1/plans/subscription/";
        private static string SubscriptionDeleteUrl = $"{BaseUrl}v1/plans/un-subscribe/";
        private static string RefundUrl = $"{BaseUrl}v1/refunds/";

        /// <summary>
        /// This constructor expects client_id and client_secret generated by 4Geeks
        /// </summary>
        /// <param name="client_id">ClientId</param>
        /// <param name="client_secret">ClientSecret</param>
        public FourGeeksPayments(string client_id, string client_secret)
        {
            Guard.NotNullOrEmpty(client_id);
            Guard.NotNullOrEmpty(client_secret);
            this.Token = GenerateToken(client_id, client_secret);
        }

        /// <summary>
        /// This constructor use the environment variables for ClientId and ClientSecret
        /// </summary>
        public FourGeeksPayments()
        {
            string client_id = Environment.GetEnvironmentVariable("client_id", EnvironmentVariableTarget.User);
            string client_secret = Environment.GetEnvironmentVariable("client_secret", EnvironmentVariableTarget.User);
            Guard.NotNullOrEmpty(client_id);
            Guard.NotNullOrEmpty(client_secret);

            this.Token = GenerateToken(client_id, client_secret);
        }

        /// <summary>
        /// This method requests a token to 4Geeks.io
        /// </summary>
        /// <param name="client_id">ClientId</param>
        /// <param name="client_secret">ClientSecret</param>
        /// <returns><see cref="Token"/></returns>
        private Token GenerateToken(string client_id, string client_secret)
        {
            try
            {
                var client = new RestClient(AuthUrl);
                var request = new RestRequest(Method.POST);

                request.AddHeader("Content-Type", "application/json");
                dynamic jsonObject = new JObject();
                jsonObject.grant_type = "client_credentials";
                jsonObject.client_id = client_id;
                jsonObject.client_secret = client_secret;

                request.AddParameter("application/json", jsonObject, ParameterType.RequestBody);

                return ProcessResponse.Process<Token>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Me GetMyDevInfo()
        {
            try
            {
                var client = new RestClient(MeUrl);
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<Me>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Me UpdateMyDevInfo(Me newMe)
        {
            try
            {
                var client = new RestClient(MeUrl);
                var request = new RestRequest(Method.PUT);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");
                request.AddParameter("application/json", JsonConvert.SerializeObject(newMe), ParameterType.RequestBody);

                return ProcessResponse.Process<Me>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public IEnumerable<Customer> GetCustomers()
        {
            try
            {
                var client = new RestClient(CustomersUrl);
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<IEnumerable<Customer>>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Customer CreateCustomer(Customer customer)
        {
            try
            {
                var client = new RestClient(CustomersUrl);
                var request = new RestRequest(Method.POST);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");
                dynamic customerJSON = new JObject();
                customerJSON.name = customer.Name;
                customerJSON.email = customer.Email;
                customerJSON.currency = customer.Currency;
                customerJSON.credit_card_number = customer.Card.CardNumber;
                customerJSON.credit_card_security_code_number = customer.Card.CVC;
                customerJSON.exp_month = customer.Card.ExpirationMonth;
                customerJSON.exp_year = customer.Card.ExpirationYear;

                request.AddParameter("application/json", customerJSON, ParameterType.RequestBody);

                return ProcessResponse.Process<Customer>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Customer GetCustomer(string customerKey)
        {
            try
            {
                var client = new RestClient($"{CustomerUrl}{customerKey}/");
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<Customer>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Customer UpdateCustomer(Customer customer)
        {
            try
            {
                var client = new RestClient($"{CustomerUrl}{customer.Key}/");
                var request = new RestRequest(Method.PUT);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");
                dynamic customerJSON = new JObject();
                customerJSON.name = customer.Name;
                customerJSON.email = customer.Email;
                customerJSON.currency = customer.Currency;
                customerJSON.credit_card_number = customer.Card.CardNumber;
                customerJSON.credit_card_security_code_number = customer.Card.CVC;
                customerJSON.exp_month = customer.Card.ExpirationMonth;
                customerJSON.exp_year = customer.Card.ExpirationYear;

                request.AddParameter("application/json", customerJSON, ParameterType.RequestBody);

                return ProcessResponse.Process<Customer>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DeleteCustomer(string key)
        {
            try
            {
                var client = new RestClient($"{CustomerUrl}{key}/");
                var request = new RestRequest(Method.DELETE);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process(client.Execute(request), HttpStatusCode.NoContent);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CreateCharge(Charge charge)
        {
            try
            {
                var client = new RestClient(ChargeUrl);
                var request = new RestRequest(Method.POST);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                request.AddParameter("application/json", JsonConvert.SerializeObject(charge), ParameterType.RequestBody);

                return ProcessResponse.Process(client.Execute(request), HttpStatusCode.Created);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CreateSimpleCharge(SimpleCharge simpleCharge)
        {
            try
            {
                var client = new RestClient(SimpleChargeUrl);
                var request = new RestRequest(Method.POST);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                request.AddParameter("application/json", JsonConvert.SerializeObject(simpleCharge), ParameterType.RequestBody);

                return ProcessResponse.Process(client.Execute(request), HttpStatusCode.Created);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public IEnumerable<Log> GetLogs()
        {
            try
            {
                var client = new RestClient(LogsUrl);
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<IEnumerable<Log>>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Log GetLog(string logId)
        {
            try
            {
                var client = new RestClient($"{LogsUrl}{logId}/");
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<Log>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CreatePlan(Plan plan)
        {
            try
            {
                var client = new RestClient(PlanCreateUrl);
                var request = new RestRequest(Method.POST);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                dynamic planJSON = new JObject();
                planJSON.name = plan.Name;
                planJSON.amount = 10.50;// plan.Amount.ToString();
                planJSON.trial_period_days = plan.TrialPeriodDays;
                planJSON.interval = plan.Interval.ToString();
                planJSON.interval_count = plan.IntervalCount.ToString();
                planJSON.credit_card_description = plan.CreditCardDescription;
                planJSON.currency = plan.Currency;

                request.AddParameter("application/json", planJSON, ParameterType.RequestBody);

                return ProcessResponse.Process(client.Execute(request), HttpStatusCode.Created);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public IEnumerable<ListPlan> GetPlans()
        {
            try
            {
                var client = new RestClient(PlansUrl);
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<IEnumerable<ListPlan>>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public ListPlan GetPlan(string planKey)
        {
            try
            {
                var client = new RestClient($"{PlansUrl}{planKey}/");
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<ListPlan>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DeletePlan(string planKey)
        {
            try
            {
                var client = new RestClient($"{PlansUrl}{planKey}/");
                var request = new RestRequest(Method.DELETE);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process(client.Execute(request), HttpStatusCode.NoContent);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool CreateSubscription(string customerKey, string planKey)
        {
            try
            {
                var client = new RestClient(SubscribeUrl);
                var request = new RestRequest(Method.POST);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                request.AddParameter("application/json", JsonConvert.SerializeObject(new
                {
                    customer_key = customerKey,
                    plan_key = planKey
                }), ParameterType.RequestBody);

                return ProcessResponse.Process(client.Execute(request), HttpStatusCode.Created);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public IEnumerable<Subscription> GetSubscriptions()
        {
            try
            {
                var client = new RestClient(SubscriptionsUrl);
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<IEnumerable<Subscription>>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Subscription GetSubscription(string subscriptionKey)
        {
            try
            {
                var client = new RestClient($"{SubscriptionUrl}{subscriptionKey}/");
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<Subscription>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public bool DeleteSubscription(string subscriptionKey)
        {
            try
            {
                var client = new RestClient($"{SubscriptionDeleteUrl}{subscriptionKey}/");
                var request = new RestRequest(Method.DELETE);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process(client.Execute(request), HttpStatusCode.NoContent);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Refund CreateRefund(double amount, string chargeId, string reason)
        {
            try
            {
                var client = new RestClient(RefundUrl);
                var request = new RestRequest(Method.POST);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                request.AddParameter("application/json", JsonConvert.SerializeObject(new
                {
                    amount,
                    charge_id = chargeId,
                    reason
                }), ParameterType.RequestBody);

                return ProcessResponse.Process<Refund>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public IEnumerable<Refund> GetRefunds()
        {
            try
            {
                var client = new RestClient(RefundUrl);
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<IEnumerable<Refund>>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public Refund GetRefund(string refundKey)
        {
            try
            {
                var client = new RestClient($"{RefundUrl}{refundKey}/");
                var request = new RestRequest(Method.GET);
                request.AddHeader("authorization", $"bearer {this.Token.Access_Token}");

                return ProcessResponse.Process<Refund>(client.Execute(request));
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
    }
}
